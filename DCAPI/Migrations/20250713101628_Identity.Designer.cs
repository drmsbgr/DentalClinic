// <auto-generated />
using System;
using DCAPPREPO.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DCAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250713101628_Identity")]
    partial class Identity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("ClinicalCustomer", b =>
                {
                    b.Property<int>("ClinicalsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClinicalsId", "CustomersId");

                    b.HasIndex("CustomersId");

                    b.ToTable("ClinicalCustomer");
                });

            modelBuilder.Entity("DCAPPLIB.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClinicalId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DCAPPLIB.Entities.Clinical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clinicals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Klinik 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Klinik 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Klinik 3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Klinik A1"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Klinik A2"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Klinik B1"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Klinik B2"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Klinik C1"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Klinik C2"
                        });
                });

            modelBuilder.Entity("DCAPPLIB.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ali1@example.com",
                            FirstName = "Ali",
                            LastName = "Yılmaz"
                        },
                        new
                        {
                            Id = 2,
                            Email = "veli2@example.com",
                            FirstName = "Veli",
                            LastName = "Kara"
                        },
                        new
                        {
                            Id = 3,
                            Email = "ayse3@example.com",
                            FirstName = "Ayşe",
                            LastName = "Demir"
                        },
                        new
                        {
                            Id = 4,
                            Email = "fatma4@example.com",
                            FirstName = "Fatma",
                            LastName = "Çelik"
                        },
                        new
                        {
                            Id = 5,
                            Email = "mehmet5@example.com",
                            FirstName = "Mehmet",
                            LastName = "Ak"
                        },
                        new
                        {
                            Id = 6,
                            Email = "can6@example.com",
                            FirstName = "Can",
                            LastName = "Şahin"
                        },
                        new
                        {
                            Id = 7,
                            Email = "zeynep7@example.com",
                            FirstName = "Zeynep",
                            LastName = "Koç"
                        },
                        new
                        {
                            Id = 8,
                            Email = "mert8@example.com",
                            FirstName = "Mert",
                            LastName = "Uçar"
                        },
                        new
                        {
                            Id = 9,
                            Email = "elif9@example.com",
                            FirstName = "Elif",
                            LastName = "Güneş"
                        },
                        new
                        {
                            Id = 10,
                            Email = "kemal10@example.com",
                            FirstName = "Kemal",
                            LastName = "Bulut"
                        },
                        new
                        {
                            Id = 11,
                            Email = "hakan11@example.com",
                            FirstName = "Hakan",
                            LastName = "Aydın"
                        },
                        new
                        {
                            Id = 12,
                            Email = "seda12@example.com",
                            FirstName = "Seda",
                            LastName = "Yıldız"
                        },
                        new
                        {
                            Id = 13,
                            Email = "ahmet13@example.com",
                            FirstName = "Ahmet",
                            LastName = "Bozkurt"
                        },
                        new
                        {
                            Id = 14,
                            Email = "nur14@example.com",
                            FirstName = "Nur",
                            LastName = "Kurt"
                        },
                        new
                        {
                            Id = 15,
                            Email = "burak15@example.com",
                            FirstName = "Burak",
                            LastName = "Deniz"
                        });
                });

            modelBuilder.Entity("DCAPPLIB.Entities.Dentist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClinicalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClinicalId");

                    b.ToTable("Dentists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClinicalId = 3,
                            FirstName = "Umut Berk",
                            LastName = "Demir"
                        },
                        new
                        {
                            Id = 2,
                            ClinicalId = 1,
                            FirstName = "Elif Naz",
                            LastName = "Yıldız"
                        },
                        new
                        {
                            Id = 3,
                            ClinicalId = 5,
                            FirstName = "Mert Can",
                            LastName = "Koç"
                        },
                        new
                        {
                            Id = 4,
                            ClinicalId = 2,
                            FirstName = "Zeynep",
                            LastName = "Aydın"
                        },
                        new
                        {
                            Id = 5,
                            ClinicalId = 4,
                            FirstName = "Ali Eren",
                            LastName = "Şahin"
                        },
                        new
                        {
                            Id = 6,
                            ClinicalId = 1,
                            FirstName = "Ayşe",
                            LastName = "Kara"
                        },
                        new
                        {
                            Id = 7,
                            ClinicalId = 5,
                            FirstName = "Emirhan",
                            LastName = "Yılmaz"
                        },
                        new
                        {
                            Id = 8,
                            ClinicalId = 3,
                            FirstName = "Melisa",
                            LastName = "Çelik"
                        },
                        new
                        {
                            Id = 9,
                            ClinicalId = 2,
                            FirstName = "Berkay",
                            LastName = "Arslan"
                        },
                        new
                        {
                            Id = 10,
                            ClinicalId = 4,
                            FirstName = "İlayda",
                            LastName = "Öztürk"
                        },
                        new
                        {
                            Id = 11,
                            ClinicalId = 2,
                            FirstName = "Deniz",
                            LastName = "Aksoy"
                        },
                        new
                        {
                            Id = 12,
                            ClinicalId = 1,
                            FirstName = "Kaan",
                            LastName = "Bozkurt"
                        });
                });

            modelBuilder.Entity("DCAPPLIB.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ClinicalCustomer", b =>
                {
                    b.HasOne("DCAPPLIB.Entities.Clinical", null)
                        .WithMany()
                        .HasForeignKey("ClinicalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DCAPPLIB.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DCAPPLIB.Entities.Appointment", b =>
                {
                    b.HasOne("DCAPPLIB.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DCAPPLIB.Entities.Dentist", b =>
                {
                    b.HasOne("DCAPPLIB.Entities.Clinical", "Clinical")
                        .WithMany("Dentists")
                        .HasForeignKey("ClinicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinical");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DCAPPLIB.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DCAPPLIB.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DCAPPLIB.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DCAPPLIB.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DCAPPLIB.Entities.Clinical", b =>
                {
                    b.Navigation("Dentists");
                });

            modelBuilder.Entity("DCAPPLIB.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
